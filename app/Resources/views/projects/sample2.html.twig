<!DOCTYPE html>
<html lang="en">
	<head>
		<title>{{project.name}}</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        <link rel="stylesheet" type="text/css"
          href="https://fonts.googleapis.com/css?family=Pacifico">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

		<style>
			body {
				color: #000;
				font-size:18px;
				margin: 0px;
				overflow: hidden;
			}



			/* Overlay style */
			.overlay {
				position: fixed;
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
			}

			/* Overlay closing cross */
			.overlay .overlay-close {
				width: 80px;
				height: 80px;
				position: absolute;
				right: 20px;
				top: 20px;
				overflow: hidden;
				border: none;
				text-indent: 200%;
				color: transparent;
				outline: none;
				z-index: 100;
			}

			/* Menu style */
			.overlay nav {
				text-align: center;
				position: relative;
				top: 50%;
				height: 60%;
				-webkit-transform: translateY(-50%);
				transform: translateY(-50%);
			}

			.overlay ol {
				list-style: none;
				padding: 0;
				margin: 0 auto;
				display: inline-block;
				height: 100%;
				position: relative;
			}

			.overlay ol li {
				display: block;
				height: 20%;
				height: calc(100% / 5);
				min-height: 24px;
				-webkit-backface-visibility: hidden;
				backface-visibility: hidden;
			}

			.overlay ol li a {
				font-size: 54px;
				font-weight: 300;
				display: block;
				color: #fff;
				-webkit-transition: color 0.2s;
				transition: color 0.2s;
			}

			.overlay ol li a:hover,
			.overlay ol li a:focus {
				color: #f0f0f0;
			}

			/* Effects */
			/* 
				-webkit-transition: opacity 0.3s 0.2s, visibility 0s 0.6s;
				transition: opacity 0.3s 0.2s, visibility 0s 0.6s;
			*/
			.overlay-genie {
				background: transparent;
				visibility: hidden;
				opacity: 0;
				-webkit-transition: opacity 0.3s 0.2s, visibility 0s 0.1s;
				transition: opacity 0.3s 0.2s, visibility 0s 0.1s;
			}

			.overlay-genie.open {
				visibility: visible;
				opacity: 1;
				-webkit-transition: opacity 0.3s;
				transition: opacity 0.3s;
			}

			.overlay-genie svg {
				position: absolute;
				top: 0;
				left: 0;
			}

			.overlay-genie .overlay-path {
				fill: rgba(128,128,128,0.2);
			}

			.overlay-genie nav {
				opacity: 0;
				-webkit-transform: scale(0.8) translateY(-48%);
				transform: scale(0.8) translateY(-48%);
				-webkit-transition: opacity 0.3s 0.3s, -webkit-transform 0.3s 0.3s;
				transition: opacity 0.3s 0.3s, transform 0.3s 0.3s;
			}

			.overlay-genie .overlay-close {
				opacity: 0;
				-webkit-transition: opacity 0.1s;
				transition: opacity 0.1s;
			}

			.overlay-genie.open nav,
			.overlay-genie.open .overlay-close {
				opacity: 1;
				-webkit-transition-delay: 0.3s;
				transition-delay: 0.3s;
			}

			.overlay-genie.open nav {
				-webkit-transform: scale(1) translateY(-50%);
				transform: scale(1) translateY(-50%);
			}

			.overlay-genie.close nav,
			.overlay-genie.close .overlay-close {
				-webkit-transition-delay: 0s;
				transition-delay: 0s;
			}

			@media screen and (max-height: 30.5em) {
				.overlay nav {
					height: 70%;
					font-size: 18px;
				}
				.overlay ol li {
					min-height: 18px;
				}
			}

			ul {
				list-style: none;
			}

			.overlay-content {
				padding-left: 15px;
				padding-right: 15px;
				margin-left: 5%;
				margin-right: 5%;
				cursor: pointer;
				font-family: 'Pacifico', serif;
				text-shadow: -1px 0 lightgray, 0 1px lightgray, 1px 0 lightgray, 0 -1px lightgray;
				font-size: 1.5vw;
			}

			.overlay-content li {
			}

			.overlay-content li:hover {
				color: white;
				text-shadow: -1px 0 darkgray, 0 1px darkgray, 1px 0 darkgray, 0 -1px darkgray;
			}

			.grid {
				font-size: 30px;
				cursor:pointer;
			    color: gray;
			}

			#view-nav {
				position: absolute;
				right: 0;
				bottom: 0;
				left: 0;
				padding: 1rem;
				background-color: #efefef;
				text-align: center;
				background: transparent;
			}
			#view-nav img{
				margin-left: 3%;
				margin-right: 3%;
				width: 4%;
			}

			.arrows {
				opacity: .5;
				-webkit-filter: grayscale(100%); filter: grayscale(100%);
			}

			.arrows:hover{
				cursor: pointer;
				-webkit-filter: grayscale(0%); filter: grayscale(0%);
			}
			#loading {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
  			}
			#loading img {
				height: 100px;
				opacity: .5;
			}
		</style>
	</head>
	<body>
	<div class="overlay overlay-genie" data-steps="m 701.56545,809.01175 35.16718,0 0,19.68384 -35.16718,0 z;m 698.9986,728.03569 41.23353,0 -3.41953,77.8735 -34.98557,0 z;m 687.08153,513.78234 53.1506,0 C 738.0505,683.9161 737.86917,503.34193 737.27015,806 l -35.90067,0 c -7.82727,-276.34892 -2.06916,-72.79261 -14.28795,-292.21766 z;m 403.87105,257.94772 566.31246,2.93091 C 923.38284,513.78233 738.73561,372.23931 737.27015,806 l -35.90067,0 C 701.32034,404.49318 455.17312,480.07689 403.87105,257.94772 z;M 51.871052,165.94772 1362.1835,168.87863 C 1171.3828,653.78233 738.73561,372.23931 737.27015,806 l -35.90067,0 C 701.32034,404.49318 31.173122,513.78234 51.871052,165.94772 z;m 52,26 1364,4 c -12.8007,666.9037 -273.2644,483.78234 -322.7299,776 l -633.90062,0 C 359.32034,432.49318 -6.6979288,733.83462 52,26 z;m 0,0 1439.999975,0 0,805.99999 -1439.999975,0 z">
		<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1440 806" preserveAspectRatio="none">
			<path class="overlay-path" d="m 701.56545,809.01175 35.16718,0 0,19.68384 -35.16718,0 z"/>
		</svg>

		<div class="">
			<a class="overlay-close">&times;</a>
		</div>
		<br>
		<div class="overlay-content">
			<div class="row">
				<p>Gallery</p>
			</div>
			<div class="row">
				<div class="col-sm-2">
					<ul>
						{% set i = 0 %}
						{%for image in images %}
							{%if image.title %}
							<li class="items" data-id="{{image.id}}" data-image="{{image.name}}">{{image.title}}</li>
							{% else %}
							<li class="items" data-id="{{image.id}}" data-image="{{image.name}}">{{image.name}}</li>
							{% endif %}
							{% set i = i+1 %}
							{% if i is divisible by(20) %}
									</ul>
								</div>
								<div class="col-sm-2">
									<ul>
							{%endif%}

						{%endfor%}
					</ul>
				</div>

			</div>
		</div>
	</div>
		<ul id="images" style="display:none;">
			{% set i = 0 %}
			{%for image in images %}
			{%if i == 0 %}
				<li data-id="{{image.id}}" data-type="{{ image.exporter.id }}" class="image current">{{image.name}}</li>
			{% else %}
				<li data-id="{{image.id}}" class="image">{{image.name}}</li>
			{% endif %}
				{% set i = i+1 %}
			{%endfor%}
		</ul>
    <div id="loading" class="hidden"><img src="{{ asset('images/ellipsis.gif') }}" /></div>
	<div id="view-nav" class="hidden">
		<img id="prev" class="arrows" src="{{ asset('images/left.png') }}" alt="Left" />
		<span class="grid" id="trigger-overlay">&#9776;</span>
		<img id="next" class="arrows" src="{{ asset('images/right.png') }}" alt="Right" />
	</div>

        <script src="https://code.jquery.com/jquery-3.1.0.min.js" integrity="sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=" crossorigin="anonymous"></script>
        <script src="{{asset('js/three.js')}}"></script>
        <script src="{{asset('js/LoaderSupport.js')}}"></script>
        <script src="{{asset('js/OBJLoader2.js')}}"></script>
        <script src="{{asset('js/MTLLoader.js')}}"></script>
        <script src="{{asset('js/OrbitControls.js')}}"></script>
        <script src="{{asset('js/Detector.js')}}"></script>
        <script src="{{asset('js/stats.min.js')}}"></script>
        <script src="{{asset('js/snap.svg-min.js')}}"></script>
        <script src="{{asset('js/classie.js')}}"></script>        
        <script src="{{asset('js/modernizr.custom.js')}}"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
		<script>
			if ( ! Detector.webgl ) {
				Detector.addGetWebGLMessage();
				document.getElementById( 'container' ).innerHTML = "";
			}
			var container, stats;
			var houseMesh;
			var camera, scene, renderer, raycaster, mouse;
/*
			document.addEventListener("keydown", function(e) {
				switch(e.keyCode) {
					case 37:
						var image = $('.current');
						if($( "li.current" ).prev()[0]) {
							$( "li.current" ).prev().addClass('current');
							image.removeClass('current');
							var newImage = $('.current');
							restart(newImage.text());
						}
					break

					case 39:
						var image = $('.current');
						if($( "li.current" ).next()[0]) {
							$( "li.current" ).next().addClass('current');
							image.removeClass('current');
							var newImage = $('.current');
							restart(newImage.text());
						}
					break;
				}
			}, false);
*/
			lon = 0, onMouseDownLon = 0,
			lat = 0, onMouseDownLat = 0,
			phi = 0, theta = 0;

			function restart(val) {
				init(val);
				animate();
			}
			restart($( "li.current" ).text());
//			init(0);
//			animate();
			function init(i) {
				$('#main').remove();
				container = document.createElement( 'div' );
				container.setAttribute('id', 'main');
				document.body.appendChild( container );
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
				scene = new THREE.Scene();
				mouse = new THREE.Vector2();
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.5, 3000000 );

				raycaster = new THREE.Raycaster();
				camera.position.set( 0, 0, 0 );
				controls = new THREE.OrbitControls( camera, renderer.domElement );
				controls.enablePan = false;
				controls.enableZoom = true;
				//controls.minDistance = 1000.0;
				//controls.maxDistance = 5000.0;
//				controls.maxPolarAngle = Math.PI * 0.9;
				controls.target.set( 0, 0, -1 );
				scene.add( new THREE.AmbientLight( 0x444444 ) );
				var e = document.getElementsByClassName('image current');

				switch(parseInt(e[0].getAttribute('data-type'))) {
					case 1: {
						// load skybox
						var cubeMap = new THREE.CubeTexture( [] );

						cubeMap.format = THREE.RGBFormat;
						cubeMap.minFilter = THREE.LinearFilter;

		//				cubeMap.anisotropy = 10;

		//				cubeMap.magFilter = THREE.NearestFilter;
					
						var loader = new THREE.ImageLoader();
						document.addEventListener( 'wheel', onDocumentMouseWheel, false );
						document.addEventListener( 'mousemove', onMouseMove, false );

						loader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+i, function ( image ) {
							var getSide = function ( x, y ) {
								var size = image.height;
								var canvas = document.createElement( 'canvas' );
								canvas.width = size;
								canvas.height = size;
								var context = canvas.getContext( '2d' );
		//						context.drawImage( image, - x * size, - y * size );
								context.drawImage( image, - x * size, 0 );
								return canvas;
							};


							cubeMap.images[ 0 ] = getSide( 0, 1 ); // px
							cubeMap.images[ 1 ] = getSide( 1, 1 ); // px
							cubeMap.images[ 2 ] = getSide( 2, 1 ); // px
							cubeMap.images[ 3 ] = getSide( 3, 4 ); // px
							cubeMap.images[ 4 ] = getSide( 4, 1 ); // px
							cubeMap.images[ 5 ] = getSide( 5, 6 ); // px

							cubeMap.needsUpdate = true;
						} );

						var cubeShader = THREE.ShaderLib[ 'cube' ];
						cubeShader.uniforms[ 'tCube' ].value = cubeMap;
						var skyBoxMaterial = new THREE.ShaderMaterial( {
							fragmentShader: cubeShader.fragmentShader,
							vertexShader: cubeShader.vertexShader,
							uniforms: cubeShader.uniforms,
							depthWrite: false,
							side: THREE.BackSide
						} );
						var skyBox = new THREE.Mesh(
							new THREE.BoxGeometry( 1000000, 1000000, 1000000 ),
							skyBoxMaterial
						);
						scene.add( skyBox );
						var geometry = new THREE.IcosahedronGeometry( 400, 4 );
						for ( var i = 0, j = geometry.faces.length; i < j; i ++ ) {
							geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );
						}
						var material = new THREE.MeshPhongMaterial( {
							vertexColors: THREE.FaceColors,
							shininess: 100,
							envMap: cubeMap
						} );

						break;
					}

					case 2: {
						var mesh;

						var geometry = new THREE.SphereGeometry( 500, 60, 40 );
						geometry.applyMatrix( new THREE.Matrix4().makeScale( -1, 1, 1 ) );

						var loader = new THREE.TextureLoader();

						loader.load(
							// resource URL
							'{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+i,
							// Function when resource is loaded
							function ( texture ) {
								// do something with the texture
								var material = new THREE.MeshBasicMaterial( {
									map: texture
								 } );
								
								mesh = new THREE.Mesh( geometry, material );
								
								scene.add( mesh );
							},
							// Function called when download progresses
							function ( xhr ) {
								c//onsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
							},
							// Function called when download errors
							function ( xhr ) {
								//console.log( 'An error happened' );
							}
						);				
						break;
					}

					case 4: {
						mtlName = '{{ mtlName }}';
						var axes = new THREE.AxisHelper(100);
						axes.position.set(-300, -50, -300);
						scene.add( axes );
						var helper = new THREE.GridHelper( 1200, 60, 0x000000, 0x002200 );
						helper.position.set(0, -100, 0);
						scene.add( helper );


						var imagePrefix = '{{ baseurl~"/images/sky/" }}';
						//var directions  = ["xpos", "xneg", "ypos", "yneg", "zpos", "zneg"];
						var directions  = ["RT", "LF", "UP", "DN", "BK", "FR"];
						var imageSuffix = ".jpg";
						var skyGeometry = new THREE.CubeGeometry( 5000, 5000, 5000 );	
						
						var materialArray = [];
						for (var n = 0; n < 6; n++)
							materialArray.push( new THREE.MeshBasicMaterial({
								map: THREE.ImageUtils.loadTexture( imagePrefix + directions[n] + imageSuffix ),
								side: THREE.BackSide
							}));
						var skyMaterial = new THREE.MeshFaceMaterial( materialArray );
						var skyBox = new THREE.Mesh( skyGeometry, skyMaterial );
						scene.add( skyBox );						


						var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
						scene.add( directionalLight );
						var callbackOnLoad = function ( event ) {
							houseMesh = event.detail.loaderRootNode;
							scene.add( houseMesh );
							houseMesh.position.set(0, 0, -100);
							houseMesh.scale.set(0.1, 0.1, 0.1);
							//event.detail.loaderRootNode.lookAt(0, 0, 0);
						};

						var objLoader = new THREE.OBJLoader2();

						var onLoadMtl = function ( materials ) {
							objLoader.setModelName( '{{images[0].title}}' );
							objLoader.setMaterials( materials );
							objLoader.setLogging( true, true );

							objLoader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}' + i, callbackOnLoad, null, null, null, false );
						};
						if(mtlName == '')
							objLoader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}' + i, callbackOnLoad, null, null, null, false );
						else
							objLoader.loadMtl( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"~images[0].title~"/"~mtlName}}', null, onLoadMtl );

					}break;
				}

			}

			function onMouseMove(event) {
				mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
				mouse.xy = (event.clientY / window.innerHeight) * 2 + 1;
			}

			function onDocumentMouseWheel( event ) {

				camera.fov += event.deltaY * 0.05;
				camera.updateProjectionMatrix();

			}
			//
			function animate() {
				requestAnimationFrame( animate );
				render();
			}
			function render() {

				if(houseMesh)
					houseMesh.rotation.y -= 0.01 * 1;

				raycaster.setFromCamera(mouse, camera);
				var intersects = raycaster.intersectObjects(scene.children);
//				console.log(intersects[0].object);
				for(var i = 0; i < intersects.length; i++) {
//					intersects[i].object.material.color.set(0xFF0000);
				}
				var time = performance.now() * 0.001;
				controls.update();

				lat = Math.max( - 85, Math.min( 85, lat ) );
				phi = THREE.Math.degToRad( 90 - lat );
				theta = THREE.Math.degToRad( lon );


				//camera.position.copy( camera.target ).negate();
				renderer.render( scene, camera );
			}
		</script>
	</body>
</html>