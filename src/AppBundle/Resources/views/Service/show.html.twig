<!DOCTYPE html>
<html lang="en">
	<head>
		<title>{{project.name}}</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        <link rel="stylesheet" type="text/css"
          href="https://fonts.googleapis.com/css?family=Pacifico">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

		<style>
			body {
				color: #000;
				font-size:18px;
				margin: 0px;
				overflow: hidden;
			}



			/* Overlay style */
			.overlay {
				position: fixed;
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
			}

			/* Overlay closing cross */
			.overlay .overlay-close {
				width: 80px;
				height: 80px;
				position: absolute;
				right: 20px;
				top: 20px;
				overflow: hidden;
				border: none;
				text-indent: 200%;
				color: transparent;
				outline: none;
				z-index: 100;
			}

			/* Menu style */
			.overlay nav {
				text-align: center;
				position: relative;
				top: 50%;
				height: 60%;
				-webkit-transform: translateY(-50%);
				transform: translateY(-50%);
			}

			.overlay ol {
				list-style: none;
				padding: 0;
				margin: 0 auto;
				display: inline-block;
				height: 100%;
				position: relative;
			}

			.overlay ol li {
				display: block;
				height: 20%;
				height: calc(100% / 5);
				min-height: 24px;
				-webkit-backface-visibility: hidden;
				backface-visibility: hidden;
			}

			.overlay ol li a {
				font-size: 54px;
				font-weight: 300;
				display: block;
				color: #fff;
				-webkit-transition: color 0.2s;
				transition: color 0.2s;
			}

			.overlay ol li a:hover,
			.overlay ol li a:focus {
				color: #f0f0f0;
			}

			/* Effects */
			/* 
				-webkit-transition: opacity 0.3s 0.2s, visibility 0s 0.6s;
				transition: opacity 0.3s 0.2s, visibility 0s 0.6s;
			*/
			.overlay-genie {
				background: transparent;
				visibility: hidden;
				opacity: 0;
				-webkit-transition: opacity 0.3s 0.2s, visibility 0s 0.1s;
				transition: opacity 0.3s 0.2s, visibility 0s 0.1s;
			}

			.overlay-genie.open {
				visibility: visible;
				opacity: 1;
				-webkit-transition: opacity 0.3s;
				transition: opacity 0.3s;
			}

			.overlay-genie svg {
				position: absolute;
				top: 0;
				left: 0;
			}

			.overlay-genie .overlay-path {
				fill: rgba(128,128,128,0.2);
			}

			.overlay-genie nav {
				opacity: 0;
				-webkit-transform: scale(0.8) translateY(-48%);
				transform: scale(0.8) translateY(-48%);
				-webkit-transition: opacity 0.3s 0.3s, -webkit-transform 0.3s 0.3s;
				transition: opacity 0.3s 0.3s, transform 0.3s 0.3s;
			}

			.overlay-genie .overlay-close {
				opacity: 0;
				-webkit-transition: opacity 0.1s;
				transition: opacity 0.1s;
			}

			.overlay-genie.open nav,
			.overlay-genie.open .overlay-close {
				opacity: 1;
				-webkit-transition-delay: 0.3s;
				transition-delay: 0.3s;
			}

			.overlay-genie.open nav {
				-webkit-transform: scale(1) translateY(-50%);
				transform: scale(1) translateY(-50%);
			}

			.overlay-genie.close nav,
			.overlay-genie.close .overlay-close {
				-webkit-transition-delay: 0s;
				transition-delay: 0s;
			}

			@media screen and (max-height: 30.5em) {
				.overlay nav {
					height: 70%;
					font-size: 18px;
				}
				.overlay ol li {
					min-height: 18px;
				}
			}

			ul {
				list-style: none;
			}

			.overlay-content {
				padding-left: 15px;
				padding-right: 15px;
				margin-left: 5%;
				margin-right: 5%;
				cursor: pointer;
				/*font-family: 'Pacifico', serif;
				text-shadow: -1px 0 lightgray, 0 1px lightgray, 1px 0 lightgray, 0 -1px lightgray;*/
				font-size: 3.5vmin;
			}

			.overlay-content li {
			}

			.overlay-content li:hover {
				color: white;
				text-shadow: -1px 0 darkgray, 0 1px darkgray, 1px 0 darkgray, 0 -1px darkgray;
			}

			.grid {
				font-size: 30px;
				cursor:pointer;
			    color: gray;
			}

			#view-nav {
				position: absolute;
				right: 0;
				bottom: 0;
				left: 0;
				padding: 1rem;
				background-color: #efefef;
				text-align: center;
				background: transparent;
			}
			#view-nav img{
				margin-left: 3%;
				margin-right: 3%;
				width: 4%;
				min-width: 35px
			}

			.arrows {
				opacity: .5;
				-webkit-filter: grayscale(100%); filter: grayscale(100%);
			}

			.arrows:hover{
				cursor: pointer;
				-webkit-filter: grayscale(0%); filter: grayscale(0%);
			}
			#loading {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
  			}
			#loading img {
				height: 100px;
				opacity: .5;
			}
		</style>
	</head>
	<body>
	<span id="pid"></span>
	<div class="overlay overlay-genie" data-steps="m 701.56545,809.01175 35.16718,0 0,19.68384 -35.16718,0 z;m 698.9986,728.03569 41.23353,0 -3.41953,77.8735 -34.98557,0 z;m 687.08153,513.78234 53.1506,0 C 738.0505,683.9161 737.86917,503.34193 737.27015,806 l -35.90067,0 c -7.82727,-276.34892 -2.06916,-72.79261 -14.28795,-292.21766 z;m 403.87105,257.94772 566.31246,2.93091 C 923.38284,513.78233 738.73561,372.23931 737.27015,806 l -35.90067,0 C 701.32034,404.49318 455.17312,480.07689 403.87105,257.94772 z;M 51.871052,165.94772 1362.1835,168.87863 C 1171.3828,653.78233 738.73561,372.23931 737.27015,806 l -35.90067,0 C 701.32034,404.49318 31.173122,513.78234 51.871052,165.94772 z;m 52,26 1364,4 c -12.8007,666.9037 -273.2644,483.78234 -322.7299,776 l -633.90062,0 C 359.32034,432.49318 -6.6979288,733.83462 52,26 z;m 0,0 1439.999975,0 0,805.99999 -1439.999975,0 z">
		<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1440 806" preserveAspectRatio="none">
			<path class="overlay-path" d="m 701.56545,809.01175 35.16718,0 0,19.68384 -35.16718,0 z"/>
		</svg>

		<div class="">
			<a class="overlay-close">&times;</a>
		</div>
		<br>
		<div class="overlay-content">
			<div class="row">
				<p>Gallery</p>
			</div>
			<div class="row">
				<div class="col-sm-2">
					<ul>
						{% set i = 0 %}
						{%for image in images %}
							{%if image.title %}
							<li class="items" data-id="{{image.id}}" data-mtl="{{ image.mtl }}" data-title="{{ image.title }}" data-image="{{image.name}}">{{image.title}}</li>
							{% else %}
							<li class="items" data-id="{{image.id}}" data-mtl="{{ image.mtl }}" data-title="{{ image.title }}" data-image="{{image.name}}">{{image.name}}</li>
							{% endif %}
							{% set i = i+1 %}
							{% if i is divisible by(20) %}
									</ul>
								</div>
								<div class="col-sm-2">
									<ul>
							{%endif%}

						{%endfor%}
					</ul>
				</div>

			</div>
		</div>
	</div>
		<ul id="images" style="display:none;">
			{% set i = 0 %}
			{%for image in images %}
			{%if i == 0 %}
				<li 
					data-id="{{image.id}}" 
					data-mtl="{{ image.mtl }}" 
					data-title="{{ image.title }}" 
					data-type="{{ image.exporter.id }}" 
					data-image="{{image.name}}" 
					class="image current">
					{{image.name}}
				</li>
			{% else %}
				<li 
					data-id="{{image.id}}" 
					data-mtl="{{ image.mtl }}" 
					data-title="{{ image.title }}" 
					data-type="{{ image.exporter.id }}" 
					data-image="{{image.name}}" 
					class="image">
					{{image.name}}
				</li>
			{% endif %}
				{% set i = i+1 %}
			{%endfor%}
		</ul>
    <div id="loading" class="hidden"><img src="{{ asset('images/ellipsis.gif') }}" /></div>
	<div id="view-nav" class="">
		<img id="prev" class="arrows" src="{{ asset('images/left.png') }}" alt="Left" />
		<span class="grid" id="trigger-overlay">&#9776;</span>
		<img id="next" class="arrows" src="{{ asset('images/right.png') }}" alt="Right" />
	</div>

        <script src="https://code.jquery.com/jquery-3.1.0.min.js" integrity="sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=" crossorigin="anonymous"></script>
        <script src="{{asset('js/three.js')}}"></script>
        <script src="{{asset('js/LoaderSupport.js')}}"></script>
        <script src="{{asset('js/OBJLoader2.js')}}"></script>
        <script src="{{asset('js/MTLLoader.js')}}"></script>
        <script src="{{asset('js/OrbitControls.js')}}"></script>
        <script src="{{asset('js/Detector.js')}}"></script>
        <script src="{{asset('js/stats.min.js')}}"></script>
        <script src="{{asset('js/snap.svg-min.js')}}"></script>
        <script src="{{asset('js/classie.js')}}"></script>        
        <script src="{{asset('js/modernizr.custom.js')}}"></script>
        <script src="{{asset('js/PointerLockControls.js')}}"></script>        
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
		<script>
			(function() {

				var triggerBttn = document.getElementById( 'trigger-overlay' ),
					overlay = document.querySelector( 'div.overlay' ),
					closeBttn = overlay.querySelector( 'a.overlay-close' );
					transEndEventNames = {
						'WebkitTransition': 'webkitTransitionEnd',
						'MozTransition': 'transitionend',
						'OTransition': 'oTransitionEnd',
						'msTransition': 'MSTransitionEnd',
						'transition': 'transitionend'
					},
					transEndEventName = transEndEventNames[ Modernizr.prefixed( 'transition' ) ],
					support = { transitions : Modernizr.csstransitions };
					s = Snap( overlay.querySelector( 'svg' ) ), 
					path = s.select( 'path' ),
					steps = overlay.getAttribute( 'data-steps' ).split(';'),
					stepsTotal = steps.length;

				function toggleOverlay() {
					if( classie.has( overlay, 'open' ) ) {
						var pos = stepsTotal-1;
						classie.remove( overlay, 'open' );
						classie.add( overlay, 'close' );
						
						var onEndTransitionFn = function( ev ) {
								classie.remove( overlay, 'close' );
							},
							nextStep = function( pos ) {
								pos--;
								if( pos < 0 ) return;
								path.animate( { 'path' : steps[pos] }, 60, mina.linear, function() { 
									if( pos === 0 ) {
										onEndTransitionFn();
									}
									nextStep(pos);
								} );
							};

						nextStep(pos);
					}
					else if( !classie.has( overlay, 'close' ) ) {
						var pos = 0;
						classie.add( overlay, 'open' );
						
						var nextStep = function( pos ) {
							pos++;
							if( pos > stepsTotal - 1 ) return;
							path.animate( { 'path' : steps[pos] }, 60, mina.linear, function() { nextStep(pos); } );
						};

						nextStep(pos);
					}
				}

				triggerBttn.addEventListener( 'click', toggleOverlay );
				closeBttn.addEventListener( 'click', toggleOverlay );
				$(document).keyup(function(e) {
				     if (e.keyCode == 27) {
				     	toggleOverlay();
				    }
				});				
			})();

			if ( ! Detector.webgl ) {
				Detector.addGetWebGLMessage();
				document.getElementById( 'container' ).innerHTML = "";
			}

			var container, stats;
			var camera, scene, renderer, raycaster, mouse;
			var markTexture, markMaterial, markPlane, plane;
			var sphereMesh, boxMesh;
			var objects = [];
			var controls = null;
			var lon = 0, onMouseDownLon = 0,
			lat = 0, onMouseDownLat = 0,
			phi = 0, theta = 0;
			var pLight = new THREE.PointLight( 0x00FF00, 1, 100 );


/* PointerLock */

			var havePointerLock = 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document;
			var controlsEnabled = true;
			var intersections = [];

			var moveForward = false;
			var moveBackward = false;
			var moveLeft = false;
			var moveRight = false;
			var canJump = false;

			var prevTime = performance.now();
			var velocity = new THREE.Vector3();
			var direction = new THREE.Vector3();
			var vertex = new THREE.Vector3();
			var color = new THREE.Color();

			if(havePointerLock) {
				var element = document.body;
				var pointerlockchange = function ( event ) {
					if ( document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element ) {
						controlsEnabled = true;
						controls.enabled = true;

					} else {
						controls.enabled = false;

					}
				};

				var pointerlockerror = function ( event ) {
					console.error(event);

				};
				document.addEventListener( 'pointerlockchange', pointerlockchange, false );
				document.addEventListener( 'mozpointerlockchange', pointerlockchange, false );
				document.addEventListener( 'webkitpointerlockchange', pointerlockchange, false );

/*				document.addEventListener( 'click', function(event) {
					element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;
					element.requestPointerLock();

				}, false );
*/

				document.addEventListener( 'pointerlockerror', pointerlockerror, false );
				document.addEventListener( 'mozpointerlockerror', pointerlockerror, false );
				document.addEventListener( 'webkitpointerlockerror', pointerlockerror, false );

			}
/* PointerLock*/

/*
			document.addEventListener("keydown", function(e) {
				switch(e.keyCode) {
					case 37:
						var image = $('.current');
						if($( "li.current" ).prev()[0]) {
							$( "li.current" ).prev().addClass('current');
							image.removeClass('current');
							var newImage = $('.current');
							restart(newImage.text());
						}
					break

					case 39:
						var image = $('.current');
						if($( "li.current" ).next()[0]) {
							$( "li.current" ).next().addClass('current');
							image.removeClass('current');
							var newImage = $('.current');
							restart(newImage.text());
						}
					break;
				}
			}, false);
*/
			function restart(val) {
				init(val);
				animate();
			}
			restart($( "li.current" ).text());

			function addEnvironment(cubeMap, file, type) {
				clear();
				var e = document.getElementsByClassName('image current');
				var canvas = document.createElement( 'canvas' );

				switch(parseInt(e[0].getAttribute('data-type'))) {
					case 1: {
						if(sphereMesh) {
							scene.remove( sphereMesh );
						}

						var loader = new THREE.ImageLoader();

						loader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+file, function ( image ) {
							document.addEventListener( 'wheel', onDocumentMouseWheel, false );
							document.addEventListener( 'mousemove', onMouseMove, false );
							var getSide = function ( x, y ) {
								var size = image.height;
								canvas.width = size;
								canvas.height = size;
								var context = canvas.getContext( '2d' );
		//						context.drawImage( image, - x * size, - y * size );
								context.drawImage( image, - x * size, 0 );
								return canvas;
							};


							cubeMap.images[ 0 ] = getSide( 0, 1 ); // px
							cubeMap.images[ 1 ] = getSide( 1, 1 ); // px
							cubeMap.images[ 2 ] = getSide( 2, 1 ); // px
							cubeMap.images[ 3 ] = getSide( 3, 4 ); // px
							cubeMap.images[ 4 ] = getSide( 4, 1 ); // px
							cubeMap.images[ 5 ] = getSide( 5, 6 ); // px

							cubeMap.needsUpdate = true;
						} );

						var cubeShader = THREE.ShaderLib[ 'cube' ];
						cubeShader.uniforms[ 'tCube' ].value = cubeMap;
						var skyBoxMaterial = new THREE.ShaderMaterial( {
							fragmentShader: cubeShader.fragmentShader,
							vertexShader: cubeShader.vertexShader,
							uniforms: cubeShader.uniforms,
							depthWrite: false,
							side: THREE.BackSide,
							overdraw:0
						} );
						boxMesh = new THREE.Mesh(
							new THREE.BoxGeometry( 1000000, 1000000, 1000000 ),
							skyBoxMaterial
						);
						boxMesh.name="boxMesh";
						scene.add( boxMesh );
						var geometry = new THREE.IcosahedronGeometry( 400, 4 );
						for ( var i = 0, j = geometry.faces.length; i < j; i ++ ) {
							geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );
						}
						var material = new THREE.MeshPhongMaterial( {
							vertexColors: THREE.FaceColors,
							shininess: 100,
							envMap: cubeMap
						} );


						break;
					}

					case 2: {

						var geometry = new THREE.SphereGeometry( 500, 60, 40 );
						geometry.applyMatrix( new THREE.Matrix4().makeScale( -1, 1, 1 ) );

						var loader = new THREE.TextureLoader();

						loader.load(
							// resource URL
							'{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+file,
							// Function when resource is loaded
							function ( texture ) {
								// do something with the texture
								var material = new THREE.MeshBasicMaterial( {
									map: texture
								 } );
								
								sphereMesh = new THREE.Mesh( geometry, material );
								
								sphereMesh.name="boxMesh";
								scene.add( sphereMesh );
							},
							// Function called when download progresses
							function ( xhr ) {
								console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
							},
							// Function called when download errors
							function ( xhr ) {
								console.log( 'An error happened' );
							}
						);				

						break;
					}

					case 4: {
						imageTitle = e[0].getAttribute('data-title');
						imageFile = e[0].getAttribute('data-image');
						imageMtl  = e[0].getAttribute('data-mtl');
						var cubeBound  = new THREE.Box3();
						var houseBound = new THREE.Box3();
						var axes = new THREE.AxesHelper(100);

						var geometry = new THREE.BoxGeometry( 1, 1, 1 );
						var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );
						var cube = new THREE.Mesh( geometry, material );
						cube.scale.set(5, 5, 5);
						cubeBound.setFromObject( cube );
						var imagePrefix = '{{ baseurl~"/images/sky/" }}';
						var directions  = ["RT", "LF", "UP", "DN", "BK", "FR"];
						var imageSuffix = ".jpg";
						var skyGeometry = new THREE.CubeGeometry( 5000, 5000, 5000 );	
						
						var materialArray = [];
						for (var n = 0; n < 6; n++)
							materialArray.push( new THREE.MeshBasicMaterial({
								map: THREE.ImageUtils.loadTexture( imagePrefix + directions[n] + imageSuffix ),
								side: THREE.BackSide
							}));
//						var skyMaterial = new THREE.MeshFaceMaterial( materialArray );
						var skyBox = scene.getObjectByName( "house" );
						if(!skyBox)
						{
							skyBox = new THREE.Mesh( skyGeometry, materialArray );
							skyBox.name = 'skybox';
							scene.add( skyBox );							
						}


						var callbackOnLoad = function ( event ) {
							let obj = {
								max : {x:325, y:190},
								min : {}
							}
							houseMesh = event.detail.loaderRootNode;
							houseMesh.name = 'house';
							houseBound.setFromObject( houseMesh );
							let newHouseBounds = ScaleToSize(cubeBound, houseBound, 0)
							houseMesh.position.set(0, -10, -600);
							hScale = 300;
							houseMesh.scale.set(hScale*newHouseBounds.scalar, hScale*newHouseBounds.scalar, hScale*newHouseBounds.scalar);
							scene.add( houseMesh );

							//camera.lookAt(houseMesh);
						};

						var objLoader = new THREE.OBJLoader2();

						var onLoadMtl = function ( materials ) {
							objLoader.setModelName( '{{images[0].title}}' );
							objLoader.setMaterials( materials );
							objLoader.setLogging( true, true );
							objLoader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}' + imageFile, callbackOnLoad, null, null, null, false );
						};
						if(imageTitle == '')
							objLoader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}' + imageFile, callbackOnLoad, null, null, null, false );
						else
							objLoader.loadMtl( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+imageTitle+"/"+imageMtl, null, onLoadMtl );

					}break;

				}
			}

			function clear() 
			{
				var house = scene.getObjectByName( "house" );
				var skybox = scene.getObjectByName( "skybox" );
				var boxMesh = scene.getObjectByName( "boxMesh" );
				var sphereMesh = scene.getObjectByName( "sphereMesh" );
				if(house)
				{
/*					house.geometry.dispose();
					house.material.dispose();
					skybox.geometry.dispose();
					skybox.material.dispose();
*/					scene.remove(house);
					scene.remove(skybox);					
				}

				if(boxMesh)
					scene.remove(boxMesh);

				if(sphereMesh)
					scene.remove(sphereMesh);
			}

		    function ScaleToSize(fitBounds, toFitBounds, diff)
		    {
		        let largestSizeToFit = 0;
		        let largestSizeFit   = 0;
		        newObj = {};

	            if (toFitBounds.getSize().x > largestSizeToFit)
            		largestSizeToFit = toFitBounds.getSize().x;
	            if (fitBounds.getSize().x > largestSizeFit)
	                largestSizeFit = fitBounds.getSize().x;

	            if (toFitBounds.getSize().y > largestSizeToFit)
            		largestSizeToFit = toFitBounds.getSize().y;
	            if (fitBounds.getSize().y > largestSizeFit)
	                largestSizeFit = fitBounds.getSize().y;

	            if (toFitBounds.getSize().z > largestSizeToFit)
            		largestSizeToFit = toFitBounds.getSize().z;
	            if (fitBounds.getSize().z > largestSizeFit)
	                largestSizeFit = fitBounds.getSize().z;

		        scalar = largestSizeFit / (largestSizeToFit+diff);

		        newObj.scalar = scalar;
		        newObj.size   = largestSizeFit;
		        return newObj;

		    }

//			init(0);
//			animate();
			function init(i) {

				$('#main').remove();
				container = document.createElement( 'div' );
				container.setAttribute('id', 'main');
				document.body.appendChild( container );
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
				scene = new THREE.Scene();
				mouse = new THREE.Vector2();
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.target = new THREE.Vector3( 0, 0, 0 );
				var vertex = new THREE.Vector3();
				var color = new THREE.Color();

// floor

				var floorGeometry = new THREE.PlaneBufferGeometry( 5000, 5000, 100, 100 );
				floorGeometry.rotateX( - Math.PI / 2 );

				// vertex displacement

				var position = floorGeometry.attributes.position;

				for ( var i = 0, l = position.count; i < l; i ++ ) {

					vertex.fromBufferAttribute( position, i );

					vertex.x += Math.random() * 20 - 10;
					vertex.y = 	-10;
					vertex.z += Math.random() * 20 - 10;

					position.setXYZ( i, vertex.x, vertex.y, vertex.z );

				}

				floorGeometry = floorGeometry.toNonIndexed(); // ensure each face has unique vertices

				position = floorGeometry.attributes.position;
				var colors = [];

				for ( var i = 0, l = position.count; i < l; i ++ ) {
					color.setHex(0xAAAAAA);
//					color.setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
					colors.push( color.r, color.g, color.b );

				}

				floorGeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );

				var floorMaterial = new THREE.MeshBasicMaterial( { vertexColors: THREE.VertexColors } );

				var floor = new THREE.Mesh( floorGeometry, floorMaterial );
				floor.name = 'Floor';
				scene.add( floor );

				/*Mark*/
				{%if projectType == 0 %}
					markTexture = new THREE.TextureLoader();
					markTexture = markTexture.load("{{baseurl~"/images/"}}"+'logo2.png', function(texture) {

					    var material = new THREE.MeshPhongMaterial({map: texture, transparent: true, opacity: 0.3});

					    plane = new THREE.Mesh(new THREE.PlaneGeometry(150, 100, 32), material);
						plane.material.side = THREE.DoubleSide;
						plane.position.set(0, 10, -100);
						camera.add(plane);
						scene.add(camera);
					});
				{%endif%}


				raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, -1, 0 ), 0, 10 );
//				camera.position.set(0, 0, 0);

				controls = new THREE.PointerLockControls( camera );
				controls.getObject().position.set(0,0,0);
				pLight.position = controls.getObject().position;

				scene.add( controls.getObject() );

//				controls.enablePan = false;
//				controls.autoRotate = true;

				var onKeyDown = function ( event ) {

					switch ( event.keyCode ) {

						case 38: // up
						case 87: // w
							moveForward = true;
							break;

						case 37: // left
						case 65: // a
							moveLeft = true; break;

						case 40: // down
						case 83: // s
							moveBackward = true;
							break;

						case 39: // right
						case 68: // d
							moveRight = true;
							break;

						case 32: // space
							if ( canJump === true ) {
								console.error('Jump: '+velocity.y);
								velocity.y += 350;
								canJump = false;
							}
							break;

					}

				};

				var onKeyUp = function ( event ) {

					switch( event.keyCode ) {

						case 38: // up
						case 87: // w
							moveForward = false;
							break;

						case 37: // left
						case 65: // a
							moveLeft = false;
							break;

						case 40: // down
						case 83: // s
							moveBackward = false;
							break;

						case 39: // right
						case 68: // d
							moveRight = false;
							break;

					}

				};

				document.addEventListener( 'keydown', onKeyDown, false );
				document.addEventListener( 'keyup', onKeyUp, false );

				//controls.minDistance = 1000.0;
				//controls.maxDistance = 5000.0;
//				controls.maxPolarAngle = Math.PI * 0.9;
//				controls.target.set( 0, 0, -1 );
				scene.add( new THREE.AmbientLight( 0x444444 ) );
				scene.add(pLight);
				var directionalLight = new THREE.DirectionalLight( 0xFFFFFF, 1.0 );
				scene.add( directionalLight );
				directionalLight.position.set(0,1,1);

//				console.log(plane);
//				waterNormals = new THREE.TextureLoader().load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+i );
//				waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;
				// load skybox
				var cubeMap = new THREE.CubeTexture( [] );
				cubeMap.format = THREE.RGBFormat;
				cubeMap.minFilter = THREE.LinearFilter;

//				cubeMap.anisotropy = 10;

//				cubeMap.magFilter = THREE.NearestFilter;

				document.addEventListener( 'wheel', onDocumentMouseWheel, false );
				document.addEventListener( 'mousemove', onMouseMove, false );
				addEnvironment(cubeMap, i);
				var loader = new THREE.ImageLoader();
				$('.items').click(function() {
					$( "#loading" ).toggleClass( "hidden" );
					var val = $(this).attr('data-image');
					var type = $(this).attr('data-type');
					var image = $('.current').removeClass('current');
					var change = $('.image[data-id="'+$(this).attr('data-id')+'"');
					change.addClass('current');

					addEnvironment(cubeMap, val, type)
					$( "#loading" ).toggleClass( "hidden" );

				});

				document.addEventListener("keydown", function(e) {
					var reload = false;
					switch(e.keyCode) {
						case 9: 
						e.preventDefault();
						element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;
						if(document.pointerLockElement)
							document.exitPointerLock();
						else
							element.requestPointerLock();

						break;
						case 37:
							var image = $('.current');
							if($( "li.current" ).prev()[0]) {
								$( "li.current" ).prev().addClass('current');
								image.removeClass('current');
								var newImage = $('.current');
								reload = true;
							}
						break

						case 39:
							var image = $('.current');
							if($( "li.current" ).next()[0]) {
								$( "li.current" ).next().addClass('current');
								image.removeClass('current');
								var newImage = $('.current');
								reload = true;
							}
						break;
					}

					if(reload) {
						$( "#loading" ).toggleClass( "hidden" );
						addEnvironment(cubeMap, newImage.text(), newImage.attr('data-type'));
						$( "#loading" ).toggleClass( "hidden" );
					}
					
				}, false);

				$('#prev').click(function() {
					var reload = false;
					var image = $('.current');
					if($( "li.current" ).prev()[0]) {
						$( "li.current" ).prev().addClass('current');
						image.removeClass('current');
						var newImage = $('.current');
						reload = true;
					}
					if(reload) {
						$( "#loading" ).toggleClass( "hidden" );
						addEnvironment(cubeMap, newImage.text(), newImage.attr('data-type'));
						$( "#loading" ).toggleClass( "hidden" );
					}
				})

				$('#next').click(function() {
					var reload = false;
					var image = $('.current');
					if($( "li.current" ).next()[0]) {
						$( "li.current" ).next().addClass('current');
						image.removeClass('current');
						var newImage = $('.current');
						reload = true;
					}
					if(reload) {
						$( "#loading" ).toggleClass( "hidden" );
						addEnvironment(cubeMap, newImage.text(), newImage.attr('data-type'));
						$( "#loading" ).toggleClass( "hidden" );
					}
				})

			}

			function onMouseMove(event) {
				mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
				mouse.xy = (event.clientY / window.innerHeight) * 2 + 1;
			}

			function onDocumentMouseWheel( event ) {

				camera.fov += event.deltaY * 0.05;
				camera.updateProjectionMatrix();

			}

			function animate() {
				requestAnimationFrame( animate );
				if ( controlsEnabled === true ) {

					raycaster.ray.origin.copy( controls.getObject().position );
					raycaster.ray.origin.y -= 20;

					intersections = raycaster.intersectObjects( scene.children, true );

					var onObject = intersections.length > 0;

					var time = performance.now();
					var delta = ( time - prevTime ) / 1000;

					velocity.x -= velocity.x * 5.0 * delta;
					velocity.z -= velocity.z * 5.0 * delta;

					velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

					direction.z = Number( moveForward ) - Number( moveBackward );
					direction.x = Number( moveLeft ) - Number( moveRight );
					direction.normalize(); // this ensures consistent movements in all directions

					if ( moveForward || moveBackward ) velocity.z -= direction.z * 250.0 * delta;
					if ( moveLeft || moveRight ) velocity.x -= direction.x * 250.0 * delta;

					if ( onObject === true ) {

						velocity.y = Math.max( 0, velocity.y );
						controls.getObject().position.y = intersections[0].point.y + 25;
						canJump = true;

					}

					controls.getObject().translateX( velocity.x * delta );
					controls.getObject().translateY( velocity.y * delta );
					controls.getObject().translateZ( velocity.z * delta );

					if ( controls.getObject().position.y < 25 ) {
						velocity.y = 0;
						controls.getObject().position.y = 25;

						canJump = true;

					}/* else if ( onObject === true ) {
						velocity.y = 0;
						controls.getObject().position.y = intersections[0].point.y + 10;

						canJump = true;
					}*/

					prevTime = time;

				}				
/*				isUserInteracting = false;

				if ( isUserInteracting === false ) {

					lon +=0.1;

				}

				lat = Math.max( - 85, Math.min( 85, lat ) );
				phi = THREE.Math.degToRad( 90 - lat );
				theta = THREE.Math.degToRad( lon );

				camera.target.x = 500 * Math.sin( phi ) * Math.cos( theta );
				camera.target.y = 500 * Math.cos( phi );
				camera.target.z = 500 * Math.sin( phi ) * Math.sin( theta );
				controls.target = camera.target;
				document.getElementById('pid').innerHTML = camera.target;
*/
//				camera.lookAt( camera.target );

				render();
			}
			function render() {
				house = scene.getObjectByName( "house" );
/*				if(house)
					houseMesh.rotation.y -= 0.003 * 1;
*/

//				raycaster.ray.origin.copy( controls.getObject().position );
//				raycaster.setFromCamera(mouse, camera);
//				var intersects = raycaster.intersectObjects(scene.children);
//				if(intersects[0] != null)
//					console.log(intersects[0].object);

//				for(var i = 0; i < intersects.length; i++) {
//					intersects[i].object.material.color.set(0xFF0000);
//				}
//				var time = performance.now() * 0.001;

				//controls.update();
				//camera.position.copy( camera.target ).negate();
				renderer.render( scene, camera );
			}
		</script>
	</body>
</html>