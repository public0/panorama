<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - terrain</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #000;
				font-family:Monospace;
				font-size:13px;
				margin: 0px;
				overflow: hidden;
			}
			#info {
				position: absolute;
				top: 0px; width: 100%;
				text-align:center;
				padding: 5px;
			}
			a {
				color: #a06851;
			}
		</style>
	</head>
	<body>
		<ul id="images" style="display:none;">
			{% set i = 0 %}
			{%for image in images %}
			{%if i == 0 %}
				<li class="image current">{{image.name}}</li>
			{% else %}
				<li class="image">{{image.name}}</li>
			{% endif %}
				{% set i = i+1 %}
			{%endfor%}
		</ul>
        <script src="https://code.jquery.com/jquery-3.1.0.min.js" integrity="sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=" crossorigin="anonymous"></script>
        <script src="{{asset('js/three.js')}}"></script>
        <script src="{{asset('js/OrbitControls.js')}}"></script>
        <script src="{{asset('js/Detector.js')}}"></script>
        <script src="{{asset('js/stats.min.js')}}"></script>
		<script>

			if ( ! Detector.webgl ) {
				Detector.addGetWebGLMessage();
				document.getElementById( 'container' ).innerHTML = "";
			}
			var container, stats;
			var camera, scene, renderer, raycaster, mouse;
/*
			document.addEventListener("keydown", function(e) {
				switch(e.keyCode) {
					case 37:
						var image = $('.current');
						if($( "li.current" ).prev()[0]) {
							$( "li.current" ).prev().addClass('current');
							image.removeClass('current');
							var newImage = $('.current');
							restart(newImage.text());
						}
					break

					case 39:
						var image = $('.current');
						if($( "li.current" ).next()[0]) {
							$( "li.current" ).next().addClass('current');
							image.removeClass('current');
							var newImage = $('.current');
							restart(newImage.text());
						}
					break;
				}
			}, false);
*/
			function restart(val) {
				init(val);
				animate();
			}
			restart($( "li.current" ).text());
//			init(0);
//			animate();
			function init(i) {
				$('#main').remove();
				container = document.createElement( 'div' );
				container.setAttribute('id', 'main');
				document.body.appendChild( container );
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
				scene = new THREE.Scene();
				mouse = new THREE.Vector2();
				camera = new THREE.PerspectiveCamera( 65, window.innerWidth / window.innerHeight, 0.5, 3000000 );
				raycaster = new THREE.Raycaster();
				camera.position.set( 2000, 750, 2000 );
				controls = new THREE.OrbitControls( camera, renderer.domElement );
				controls.enablePan = false;
				controls.minDistance = 1000.0;
				controls.maxDistance = 5000.0;
//				controls.maxPolarAngle = Math.PI * 0.9;
				controls.target.set( 0, 500, 0 );
				scene.add( new THREE.AmbientLight( 0x444444 ) );
				var light = new THREE.DirectionalLight( 0xffffbb, 1 );
				light.position.set( - 1, 1, - 1 );
				scene.add( light );
				waterNormals = new THREE.TextureLoader().load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+i );
				waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;
				// load skybox
				var cubeMap = new THREE.CubeTexture( [] );
				cubeMap.format = THREE.RGBFormat;
				var loader = new THREE.ImageLoader();
				document.addEventListener( 'wheel', onDocumentMouseWheel, false );
				document.addEventListener( 'mousemove', onMouseMove, false );

				loader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+i, function ( image ) {
					document.addEventListener( 'wheel', onDocumentMouseWheel, false );
					document.addEventListener( 'mousemove', onMouseMove, false );
					var getSide = function ( x, y ) {
						var size = 1536;
						var canvas = document.createElement( 'canvas' );
						canvas.width = size;
						canvas.height = size;
						var context = canvas.getContext( '2d' );
//						context.drawImage( image, - x * size, - y * size );
						context.drawImage( image, - x * size, 0 );
						return canvas;
					};


					cubeMap.images[ 0 ] = getSide( 0, 1 ); // px
					cubeMap.images[ 1 ] = getSide( 1, 1 ); // px
					cubeMap.images[ 2 ] = getSide( 2, 1 ); // px
					cubeMap.images[ 3 ] = getSide( 3, 4 ); // px
					cubeMap.images[ 4 ] = getSide( 4, 1 ); // px
					cubeMap.images[ 5 ] = getSide( 5, 6 ); // px

					cubeMap.needsUpdate = true;
				} );

				document.addEventListener("keydown", function(e) {
					switch(e.keyCode) {
						case 37:
							var image = $('.current');
							if($( "li.current" ).prev()[0]) {
								$( "li.current" ).prev().addClass('current');
								image.removeClass('current');
								var newImage = $('.current');
							}
						break

						case 39:
							var image = $('.current');
							if($( "li.current" ).next()[0]) {
								$( "li.current" ).next().addClass('current');
								image.removeClass('current');
								var newImage = $('.current');
							}
						break;
					}
					loader.load( '{{baseurl~"/uploads/"~userId~"/"~project.id~"/images/"}}'+newImage.text(), function ( image ) {
						document.addEventListener( 'wheel', onDocumentMouseWheel, false );
						document.addEventListener( 'mousemove', onMouseMove, false );
						var getSide = function ( x, y ) {
							var size = 1536;
							var canvas = document.createElement( 'canvas' );
							canvas.width = size;
							canvas.height = size;
							var context = canvas.getContext( '2d' );
							context.drawImage( image, - x * size, 0 );
							return canvas;
						};


						cubeMap.images[ 0 ] = getSide( 0, 1 ); // px
						cubeMap.images[ 1 ] = getSide( 1, 1 ); // px
						cubeMap.images[ 2 ] = getSide( 2, 1 ); // px
						cubeMap.images[ 3 ] = getSide( 3, 4 ); // px
						cubeMap.images[ 4 ] = getSide( 4, 1 ); // px
						cubeMap.images[ 5 ] = getSide( 5, 6 ); // px

						cubeMap.needsUpdate = true;
					} );
					
				}, false);


				var cubeShader = THREE.ShaderLib[ 'cube' ];
				cubeShader.uniforms[ 'tCube' ].value = cubeMap;
				var skyBoxMaterial = new THREE.ShaderMaterial( {
					fragmentShader: cubeShader.fragmentShader,
					vertexShader: cubeShader.vertexShader,
					uniforms: cubeShader.uniforms,
					depthWrite: false,
					side: THREE.BackSide
				} );
				var skyBox = new THREE.Mesh(
					new THREE.BoxGeometry( 1000000, 1000000, 1000000 ),
					skyBoxMaterial
				);
				scene.add( skyBox );
				var geometry = new THREE.IcosahedronGeometry( 400, 4 );
				for ( var i = 0, j = geometry.faces.length; i < j; i ++ ) {
					geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );
				}
				var material = new THREE.MeshPhongMaterial( {
					vertexColors: THREE.FaceColors,
					shininess: 100,
					envMap: cubeMap
				} );
			}

			function onMouseMove(event) {
				mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
				mouse.xy = (event.clientY / window.innerHeight) * 2 + 1;
			}

			function onDocumentMouseWheel( event ) {

				camera.fov += event.deltaY * 0.05;
				camera.updateProjectionMatrix();

			}
			//
			function animate() {
				requestAnimationFrame( animate );
				render();
			}
			function render() {
				raycaster.setFromCamera(mouse, camera);
				var intersects = raycaster.intersectObjects(scene.children);
//				console.log(intersects[0].object);
				for(var i = 0; i < intersects.length; i++) {
//					intersects[i].object.material.color.set(0xFF0000);
				}
				var time = performance.now() * 0.001;
				controls.update();
				//camera.position.copy( camera.target ).negate();
				renderer.render( scene, camera );
			}
		</script>
	</body>
</html>